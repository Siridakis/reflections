What happens when you initialize a repository? Why do you need to do it?

A .git file is created which will store all metadata created when versioning.
I need to do it so I can turn a simple directory into a git repository, allowing version control.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

It keeps track of which files you want to commit next.
It gives you a choice to commit only the files you want.
(I'm not sure of any of this. I'm actually very confused right now. The same goes to the previous question).

How can you use the staging area to make sure you have one commit per logical
change?

Using git diff to check differences between the current files and the files staged.
Also, using git diff --staged to check differences between staged files and the last commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When you want to add new features without altering the base code or when you want to
try changes that might alter the core code significantly.
Branches would help do this without worrying about having to track several commits back
in case of a problem introduced by the new feature.
It would also be good when working with a team where several people are working on the same code,
adding different features to it.

How do the diagrams help you visualize the branch structure?

It helps a lot since it shows graphically the relations between commits, where
the branches were created and how they are connected.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

All the changes made to both branches will be incorpored in a new commit.
The branches will becom a single branch from this point on.
This branch will have access to the commits of both branches that were merged together.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

The pros are not having to check all the differences and see if they conflict and add them manually into code
The cons are the limited interpretation capacity of git.
Things that look obvious from the programmer's point of view might not be from git's point of view,
and therefore, be interpreted as a conflict.
